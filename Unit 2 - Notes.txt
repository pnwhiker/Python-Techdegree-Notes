
# first, last = input('please enter your name: ').split(' ')

# print(first)
# print(last)


# meats = ['beef', 'chicken', 'steak', 'lamb', 'pork']

# for index, meat in enumerate(meats, 1):
#     print(f'{index}. {meat}')
    

""" Enumerates the loops in the iterable
    2nd value passed to iterable inside the enmuerate method is the starting number
    for the lines that are retuned, in this case the first item numeral will be 1
"""

_______**
RANGES

Range method will iterate from the start val to the stop val 
and step-thru by the step val.
Note - if no start val is passed or less than 3 args are passed, 
Python assumes starting point is 0, defaul step value is 1


range(start, stop, step)

for i in range(0,10,1)
    print(i)

Ranges are EXclusive of stop values, so the loop above will not run / output of 10,
only values 0 thru 9 will be printed.

* Note - as Python will defaul start and step args to 0 an 1, this loop can
  be expressed as 'for i in range(10): etc'

_______**


_______**
SLICES

Portion of a sequence, similar syntax as range()

given a sequence, seq, with a list of values

seq = [1,2,3,4,5,6,7,8,9]

seq[ start : stop : step ]

seq[1:4:1] will be interetpreted as 'take a slice of sequence 'seq',
starting with the first value, ending with the 4th value, incrementing 
by 1 each time

* Notes

    - slice method assumes if no values are given for start / stop / step
      points, the default vaules are the first val, last val, and 1

    - slice w/ step value of -1 will reverse a list

    - slice doesn't change the original sequence, it creates a new one

    - 



_______**


LEN, MIN, MAX

All built-in functions that will work on all sequences which contain all
elements of the same datatype )all numbers, all strings, etc)

len() - returns length of sequence passed as argument

min() - returns minimum value of sequence passed as argument

max() - returns largest value in sequence passed as argument


_______**

MEMBERSHIP TESTING

Whether or not an item or sequence is IN another sequence

docs = "any random string"

if 'random' in* docs:
    # do something
else:
    # do something else

* Note - also works as 'not in' - test condition will eval to true / false
 depending on what you're looking for as well

_______**

COUNT & INDEX


COUNT
    docs = "any random string"

    print(docs.count('target value'))
        returns int value of number of times the target 
        string or value is found in the target sequence(s)

    docs = "any random string"

INDEX
    print(docs.index('target value'))
        returns int value of the first index position of the 
        first appearance of the target value's appearance in the
        sequence passed to the .index() method.
        Note - only returns index value of FIRST instance of target value


_______**


CONCANTENATION

combining two objects together, for mutable sequences this will modify
one sequence, for immutable sequences this will need to create a NEW sequence
and is accomplished with the plus sign (+)

MULTIPLICATION

sequence name plus multiplication sign (*) and the (int) value to multiply it


_______**

DICTIONARIES

Intro / Info - set of key:value pairs, each hving a label (the key) which is the index
value of the associated value

    Syntax - wrapped in curly braces / separated by commas {key:value, key:value, key:value}
    Order of the key / value pairs does not matter

Accessing data inside the dictionary;

    Much like pulling values from lists, the dictionary name and the KEY are
    used to pull the assocaited value(s), given the following dictionary for an example:

    course = {'name':'Ryan', 'age':39, 'hometown':'Tualatin'}

    to access name and print we would use the following code;

        print(course['name']) which outputs Ryan

KEYS method

    the .keys() method returns a list of the (currently ordered) keys present in the
    dictionary the method is called on, given the above dictionary as example

        course.keys() returns the keys from the dictionary

VALUES method

    like the .keys method, .values() will return list of the associated values of the
    keys present in the dictionary in the order the appear (currently)

        course.values() returns the values from the dictionary

_______**

UPDATING & MUTATING DICTIONARIES

    dictionary is a mutable (able to be mutated) datatype.

    to update OR add a value to a dictionary we use the name of the dictionary
    with the existing or intended key in brackets, and assign the value with
    the equal sign.  this will change OR add the key and value when executed

        course['instructor'] = 'ashley'
        *note - if the course dictionary does not have a key called 'instructor'
         the above line of code will create it 

    to delete a key / value pair we use the del() method; to delete the above key:value pair
    we would use the following line of code;

        del(course['instructor'])

_______**

ITERATING, PACKING AND UNPACKING DICTIONARIES

items() method will return both key and value pair for a dictionary as individual
tuples for each key:value pair within the dictionary.  Using .items() in a for loop
will look like the following;

    for key, value in course.items():
        print(key)
        print(value)

    This code will print a list of the keys and their assoc. values as it iterates thru
    each tuple that the items() method has created when executed against the course dictionary

Packing with Dictionaries

    passing variable arguments to a function in place of positional arguments looks
    like assignment to those inidvidual arguments, replacing the string of arguments with
    **kwargs will allow us to pass as many variable arguments as we need to to the 
    assocaited function as in the following example;

        def print_teacher(**kwargs):
            for key, value in kwargs.items():
                print(f'[key]: [value]')

        print_teacher(name='ashley', job='instructor', topic='python')*

        # function call returns

            name: ashley
            job: instructor
            topic: Python

        *note; keys are left of the assignment operator, values are to the right



_______**

DOUBLE UNDERS (DUNDER MAIN)

Dunder = double-underscore or _ _ 

_______**



